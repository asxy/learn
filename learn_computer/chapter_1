在Unix系统上，从源文件到目标文件的转化是由编译器驱动程序完成的

编译系统：预处理器（cpp）、编译器（ccl）、汇编器(as)、 连接器(ld)
	预处理阶段：预处理器根据以字符#开头的命令，修改原始的C程序，得到了另一个C程序，通常是以.i作为文件扩展名。
	编译阶段：编译器将文本文件.i翻译成文本文件.s，它包含一个汇编语言程序。
	汇编阶段：汇编器将.s翻译成 机器语言指令，把这些指令打包成一种叫做可重定位目标程序的格式，并将结果保存在目标文件.o中(.0文件是一个二进制文件)
	链接阶段：连接器将C语言函数存在的文件与当前文件合并，生成一个可执目标文件，由系统执行。

系统的硬件组成：
	1.总线:贯穿整个系统的一组电子管道，携带信息字节并负责在各个部件间传递。总线传送的字节块（字）是定长的，字中的字节数（字长）是一个基本的系统参数，一般为4字节（32位）或8字节（64位）
	2.I/0设备：输入输出设备（输入有鼠标、键盘，输出有显示器，存储有磁盘）
	3.主存：主存是一个临时的存储设备，在处理器执行程序时，用来存放程序和程序处理的数据。从物理上来说，主存是由一组动态随机存取存储器芯片组成。从逻辑上来说，存储器是一个线性的字节数组，每个字节都有其
唯一的地址，这些地址是从零开始的。
	4.处理器：中央处理单元，简称处理器，是解释（或执行）存储在主存中指令的引擎。处理器的核心是一个大小为一个字的存储设备（或寄存器），称为程序计数器（PC）。在任何时刻，ＰＣ都指向主存中的某条机器语言
指令（即含有该条指令的地址）。
		加载：从主存复制一个字节或者一个字到寄存器，以覆盖寄存器原来的内容。
		存储：从寄存器复制一个字节或者一个字到主存的某个位置，以覆盖这个位置上原来的内容。
		操作：把两个寄存器的内容复制到ＡＬＵ，ＡＬＵ对这两个字做算术运算，并将结果存放到一个寄存器中，已覆盖该寄存器中原来的内容。
		跳转：从指令本身中抽取一个字，并将这个字复制到程序计数器中，已覆盖ＰＣ中原来的值。
	指令集架构描述的是每条机器代码指令的效果；微体系结构描述的是处理器实际上是如何实现的。

操作系统有两个基本功能：
	１、防止硬件被失控的应用程序滥用；
	２、向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备。

虚拟内存：
	程序代码和数据：对所有进程来说，代码是从同意固定地址开始，紧接着的是和Ｃ全局变量相对应的数据位置。代码和数据区是直接按照可执行目标文件的内容初始化的。
	堆：代码和数据区后紧随着的是运行时堆。代码和数据区在进程一开始运行时就被指定了大小，与此不同，当调用像malloc和free这样的Ｃ标准库函数时，堆可以在运行时动态地扩展和收缩。
	共享库：大约在地址空间的中间部分是一块用来存放像Ｃ标准库和数学库这样的共享库的代码和数据的区域。
	栈：位于用户虚拟地址空间顶部的就是用户栈，编译器用它来实现函数调用。和堆一样，用户栈在程序执行期间可以动态的扩展和收缩。
	内核虚拟内存：地址空间顶部的区域是为内核保留的。不允许应用程序读写这个区域的内容或者直接调用内核代码定义的函数。

并发和并行
	１．线程级并发：构建在进程这个抽象之上，我们能够设计出同时有多个程序执行的系统，这就导致了并发。
	２．指令级并行：在较低的抽象层次想，现代处理器可以同时执行多条指令的属性成为指令级并行。
	３．单指令、多数据并行：在最低层次上，许多现代处理器拥有特殊的硬件，允许一条指令产生多个可以做并行执行的操作，这种方式成为单指令、多数据，即ＳＩＭＤ并行。


章末小结：
	计算机系统是硬件和系统软件组成的，它们共同协作以运行应用程序。计算机内部的信息被表示为一组组的位，它们依据上下文有不同的解释方式。程序被其他程序翻译成不同的形式，开始时是ＡＳＣＩＩ文本，然后被
编译器和连接器翻译成二进制可执行文件。
	处理器读取并解释存放在主存里的二进制指令。因为计算机花费了大量的时间在内存、Ｉ／０设备和ＣＰＵ寄存器之间复制数据，所以将系统中的存储设备划分成层次结构————ＣＰＵ寄存器在顶部，接着是多层的硬件
高速缓存存储器、ＤＲＡＭ主存和磁盘存储器。在层次模型中，位于更高层的存储设备比低层的存储设备要更快，单位比特造价也更高。层次结构中较高层次的存储设备可以作为较低层次设备的高速缓存。通过理解和运用这种
存储层次结构的只是，程序员可以优化C程序的性能。
	操作系统内核是应用程序和硬件之间的媒介。它提供三个基本的抽象：1）文件是对I/O 设备的抽象；2)虚拟内存是对主存和侧胖的抽象；3）进程是处理器、主存和I/O 设备的抽象。
	最后，网络提供了计算机系统之间通信的手段。从特殊系统角度来看，网络就是一中I/O设备。
