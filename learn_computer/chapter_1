在Unix系统上，从源文件到目标文件的转化是由编译器驱动程序完成的

编译系统：预处理器（cpp）、编译器（ccl）、汇编器(as)、 连接器(ld)
	预处理阶段：预处理器根据以字符#开头的命令，修改原始的C程序，得到了另一个C程序，通常是以.i作为文件扩展名。
	编译阶段：编译器将文本文件.i翻译成文本文件.s，它包含一个汇编语言程序。
	汇编阶段：汇编器将.s翻译成 机器语言指令，把这些指令打包成一种叫做可重定位目标程序的格式，并将结果保存在目标文件.o中(.0文件是一个二进制文件)
	链接阶段：连接器将C语言函数存在的文件与当前文件合并，生成一个可执目标文件，由系统执行。

系统的硬件组成：
	1.总线:贯穿整个系统的一组电子管道，携带信息字节并负责在各个部件间传递。总线传送的字节块（字）是定长的，字中的字节数（字长）是一个基本的系统参数，一般为4字节（32位）或8字节（64位）
	2.I/0设备：输入输出设备（输入有鼠标、键盘，输出有显示器，存储有磁盘）
	3.主存：主存是一个临时的存储设备，在处理器执行程序时，用来存放程序和程序处理的数据。从物理上来说，主存是由一组动态随机存取存储器芯片组成。从逻辑上来说，存储器是一个线性的字节数组，每个字节都有其
唯一的地址，这些地址是从零开始的。
	4.处理器：中央处理单元，简称处理器，是解释（或执行）存储在主存中指令的引擎。处理器的核心是一个大小为一个字的存储设备（或寄存器），称为程序计数器（PC）。在任何时刻，ＰＣ都指向主存中的某条机器语言
指令（即含有该条指令的地址）。
		加载：从主存复制一个字节或者一个字到寄存器，以覆盖寄存器原来的内容。
		存储：从寄存器复制一个字节或者一个字到主存的某个位置，以覆盖这个位置上原来的内容。
		操作：把两个寄存器的内容复制到ＡＬＵ，ＡＬＵ对这两个字做算术运算，并将结果存放到一个寄存器中，已覆盖该寄存器中原来的内容。
		跳转：从指令本身中抽取一个字，并将这个字复制到程序计数器中，已覆盖ＰＣ中原来的值。
	指令集架构描述的是每条机器代码指令的效果；微体系结构描述的是处理器实际上是如何实现的。
